'''
№1.
Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
'''

def stipend():
    try:
        per_hour = float(input('Выработка в часах: '))
        wage = int(input('Ставка в час: '))
        fee = int(input('Премия: '))
        count = per_hour * wage + fee
        print(f'заработная плата сотрудника  {count}')
    except ValueError:
        return print('Not a number')
stipend()



'''

№2.
Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
'''

my_list = [15, 2, 3, 1, 7, 5, 4, 10]
my_new_list = [el for num, el in enumerate(my_list) if my_list[num - 1] < my_list[num]]
print(f'Исходный список {my_list}')
print(f'Новый список {my_new_list}')



'''
№3 
Для чисел в пределах от 20 до 240 найти числа,кратные 20 или 21.Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
'''
print(f'Числа от 20 до 240 кратные 20 или 21 - {[el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]}')


'''
№4
Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию.
 Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
'''

my_list = [2, 5, 3, 25, 19, 2, 4, 1, 21, 5, 1, 2]
my_new_list = [el for el in my_list if my_list.count(el) < 2]
print(my_new_list)


'''
№5
Реализовать формирование списка, используя функцию range() и возможности генератора.
В список должны войти четные числа от 100 до 1000 (включая границы).
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
'''
from functools import reduce

def my_func(el_p, el):
    return el_p * el

print(f'Список четных значений {[el for el in range(99, 1001) if el % 2 == 0]}')
print(f'Результат перемножения всех элементов списка {reduce(my_func, [el for el in range(99, 1001) if el % 2 == 0])}')



'''
№6
Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.

Подсказка: использовать функцию count() и cycle() модуля itertools.
Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.

Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
 Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
'''

from itertools import count

def count_func(first_number, last_number):
    for el in count(first_number):
        if el > last_number:
            break
        else:
            print(el)
count_func(first_number = int(input("Введите стартовое число: ")), last_number = int(input("Введите число при котором цикл остановится: ")))

from itertools import cycle

def cycle_func(my_list, iteration):
    i = 0
    iter = cycle(my_list)
    while i < iteration:
        print(next(iter))
        i+=1

cycle_func(my_list = [0, 7], iteration = int(input("Введите любое число, при котором повторение элементов списка будет прекращен: ")))
